// <auto-generated />
using System;
using BaseScource.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseSource.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240112083555_init_db")]
    partial class init_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseSource.Model.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("STREET");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_ID");

                    b.Property<string>("WardId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("WARD_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[USER_ID] IS NOT NULL");

                    b.HasIndex("WardId");

                    b.ToTable("ADDRESS");
                });

            modelBuilder.Entity("BaseSource.Model.AdministrativeUnit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.ToTable("AdministrativeUnit");
                });

            modelBuilder.Entity("BaseSource.Model.AuditTrailHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("ACTION");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("DeviceIP")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("DEVICE_IP");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("EntityId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ENTITY_ID");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_CODE");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TABLE_NAME");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AUDIT_TRAIL");
                });

            modelBuilder.Entity("BaseSource.Model.AuthHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("CONTENT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AUTH_HISTORY");
                });

            modelBuilder.Entity("BaseSource.Model.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("BaseSource.Model.District", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("AdministrativeUnitID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ADMINISTRATIVE_UNIT_ID");

                    b.Property<int>("CODE")
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("EnSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("EN_SLUG");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME_EN");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("PROVINCE_ID");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeUnitID");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DISTRICTS");
                });

            modelBuilder.Entity("BaseSource.Model.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LABEL");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("SIZE");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TYPE");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("IMAGES");
                });

            modelBuilder.Entity("BaseSource.Model.ImageUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("IMAGE_ID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("IMAGE_USER");
                });

            modelBuilder.Entity("BaseSource.Model.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("CONTENT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IS_READ");

                    b.Property<string>("OrderID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ORDER_ID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("OrderID")
                        .IsUnique()
                        .HasFilter("[ORDER_ID] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("NOTIFICATIONS");
                });

            modelBuilder.Entity("BaseSource.Model.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ORDERS");
                });

            modelBuilder.Entity("BaseSource.Model.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ORDER_ID");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("PRICE");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ORDER_DETAILS");
                });

            modelBuilder.Entity("BaseSource.Model.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("PRICE");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("BaseSource.Model.ProductCategory", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CATEGORY_ID");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PRODUCT_CATEGORY");
                });

            modelBuilder.Entity("BaseSource.Model.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("AdministrativeUnitID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ADMINISTRATIVE_UNIT_ID");

                    b.Property<int>("CODE")
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("EnSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("EN_SLUG");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME_EN");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeUnitID");

                    b.ToTable("PROVINCES");
                });

            modelBuilder.Entity("BaseSource.Model.ResetPassword", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit")
                        .HasColumnName("IS_VERIFY");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("RESET_PASSWORD");
                });

            modelBuilder.Entity("BaseSource.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ROLE", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7d4d449e-da9d-4015-8388-837797511dec",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "14ac5cb7-c7ce-4a74-8e8e-78e0324e4e64",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "ac294ece-68cc-4ea1-bde9-6ab257d14f0b",
                            Name = "Collaborator",
                            NormalizedName = "COLLABORATOR"
                        },
                        new
                        {
                            Id = "59bad76c-4fad-4279-9ec5-de521378602e",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "00216558-b156-497f-ae76-dee369eb93c0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1f3c1817-ba71-4277-ac92-c4676a6facc0",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = "63d5f700-0e02-4f6b-8760-406196cfb2e5",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("BaseSource.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("BaseSource.Model.UserHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FIELD");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("MODIFIED_AT");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("NEW_VALUE");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("OLD_VALUE");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CUSTOMER_HISTORY");
                });

            modelBuilder.Entity("BaseSource.Model.Ward", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("AdministrativeUnitID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ADMINISTRATIVE_UNIT_ID");

                    b.Property<int>("CODE")
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("DISTRICT_ID");

                    b.Property<string>("EnSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("EN_SLUG");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME_EN");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeUnitID");

                    b.HasIndex("DistrictId");

                    b.ToTable("WARDS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ROLE_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("USER_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("USER_LOGIN", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("USER_TOKEN", (string)null);
                });

            modelBuilder.Entity("BaseSource.Model.AspNetUserRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("AspNetUserRoles");
                });

            modelBuilder.Entity("BaseSource.Model.Address", b =>
                {
                    b.HasOne("BaseSource.Model.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("BaseSource.Model.Address", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("BaseSource.Model.Ward", "Ward")
                        .WithMany("Address")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("BaseSource.Model.AuditTrailHistory", b =>
                {
                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("AuditTrail")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.AuthHistory", b =>
                {
                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("AuthHistory")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.District", b =>
                {
                    b.HasOne("BaseSource.Model.AdministrativeUnit", "AdministrativeUnit")
                        .WithMany("Districts")
                        .HasForeignKey("AdministrativeUnitID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AdministrativeUnit");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("BaseSource.Model.ImageUser", b =>
                {
                    b.HasOne("BaseSource.Model.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.Notification", b =>
                {
                    b.HasOne("BaseSource.Model.Order", "Order")
                        .WithOne("Notification")
                        .HasForeignKey("BaseSource.Model.Notification", "OrderID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.Order", b =>
                {
                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.OrderDetail", b =>
                {
                    b.HasOne("BaseSource.Model.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("BaseSource.Model.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BaseSource.Model.ProductCategory", b =>
                {
                    b.HasOne("BaseSource.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BaseSource.Model.Province", b =>
                {
                    b.HasOne("BaseSource.Model.AdministrativeUnit", "AdministrativeUnit")
                        .WithMany("Provinces")
                        .HasForeignKey("AdministrativeUnitID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AdministrativeUnit");
                });

            modelBuilder.Entity("BaseSource.Model.ResetPassword", b =>
                {
                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("ResetPassword")
                        .HasForeignKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.UserHistory", b =>
                {
                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("UserHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.Ward", b =>
                {
                    b.HasOne("BaseSource.Model.AdministrativeUnit", "AdministrativeUnit")
                        .WithMany("Wards")
                        .HasForeignKey("AdministrativeUnitID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AdministrativeUnit");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BaseSource.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BaseSource.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BaseSource.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BaseSource.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseSource.Model.AspNetUserRoles", b =>
                {
                    b.HasOne("BaseSource.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseSource.Model.AdministrativeUnit", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Provinces");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("BaseSource.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BaseSource.Model.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("BaseSource.Model.Image", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BaseSource.Model.Order", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("BaseSource.Model.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BaseSource.Model.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("BaseSource.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BaseSource.Model.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("AuditTrail");

                    b.Navigation("AuthHistory");

                    b.Navigation("Images");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("ResetPassword");

                    b.Navigation("Roles");

                    b.Navigation("UserHistory");
                });

            modelBuilder.Entity("BaseSource.Model.Ward", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
