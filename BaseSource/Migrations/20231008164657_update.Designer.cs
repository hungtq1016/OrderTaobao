// <auto-generated />
using System;
using BaseScource.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseSource.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231008164657_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseSource.Model.AccessToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EXPIRE_AT");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_USED_AT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("TOKEN");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ACCESS_TOKEN");
                });

            modelBuilder.Entity("BaseSource.Model.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("STREET");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.Property<string>("WardId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("WARD_ID");

                    b.HasKey("Id");

                    b.HasIndex("WardId");

                    b.ToTable("ADDRESS");
                });

            modelBuilder.Entity("BaseSource.Model.Admin", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasColumnName("PHONE");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.ToTable("ADMIN");
                });

            modelBuilder.Entity("BaseSource.Model.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("ParentId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("PARENT_ID");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("BaseSource.Model.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasColumnName("PHONE");

                    b.Property<string>("RememberToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("REMEMBER_TOKEN");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.HasIndex("Email", "UserName");

                    b.ToTable("CUSTOMERS");
                });

            modelBuilder.Entity("BaseSource.Model.CustomerHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FIELD");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("OLD_VALUE");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CUSTOMER_HISTORY");
                });

            modelBuilder.Entity("BaseSource.Model.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("PROVINCE_ID");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TYPE");

                    b.Property<string>("TypeSlug")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TYPE_SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DISTRICTS");
                });

            modelBuilder.Entity("BaseSource.Model.EmailVerify", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("bit")
                        .HasColumnName("IS_VERIFY");

                    b.Property<DateTime>("VerifyAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("VERIFY_AT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("EMAIL_VERIFY");
                });

            modelBuilder.Entity("BaseSource.Model.Log.AuthHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("CONTENT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AUTH_HISTORY");
                });

            modelBuilder.Entity("BaseSource.Model.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("CONTENT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IS_READ");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ORDER_ID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("NOTIFICATIONS");
                });

            modelBuilder.Entity("BaseSource.Model.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ORDERS");
                });

            modelBuilder.Entity("BaseSource.Model.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ORDER_ID");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("PRICE");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ORDER_DETAILS");
                });

            modelBuilder.Entity("BaseSource.Model.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IS_AVAILABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("PRICE");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PRODUCTS");
                });

            modelBuilder.Entity("BaseSource.Model.Province", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TYPE");

                    b.Property<string>("TypeSlug")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TYPE_SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.ToTable("PROVINCES");
                });

            modelBuilder.Entity("BaseSource.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.ToTable("ROLES");

                    b.HasData(
                        new
                        {
                            Id = "78e6f28b-65c1-4a0e-ad56-1d1e1b6a887e",
                            CreatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3633),
                            CreatedBy = "admin",
                            Enable = true,
                            Name = "Customer",
                            UpdatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3634),
                            UpdatedBy = "admin"
                        },
                        new
                        {
                            Id = "8c80e5e6-21ad-4a86-8a75-80931d78382e",
                            CreatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3638),
                            CreatedBy = "admin",
                            Enable = true,
                            Name = "Staff",
                            UpdatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3638),
                            UpdatedBy = "admin"
                        },
                        new
                        {
                            Id = "5a1e86e4-7272-4e22-a242-c00e22e4302c",
                            CreatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3641),
                            CreatedBy = "admin",
                            Enable = true,
                            Name = "Collaborator",
                            UpdatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3641),
                            UpdatedBy = "admin"
                        },
                        new
                        {
                            Id = "8f7fc39c-c2ac-4f21-9686-d0adb983120e",
                            CreatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3644),
                            CreatedBy = "admin",
                            Enable = true,
                            Name = "Manager",
                            UpdatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3644),
                            UpdatedBy = "admin"
                        },
                        new
                        {
                            Id = "566f1d1d-34bb-4ce4-af18-ac9165badc7d",
                            CreatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3646),
                            CreatedBy = "admin",
                            Enable = true,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3647),
                            UpdatedBy = "admin"
                        },
                        new
                        {
                            Id = "30370dbd-e39f-467a-ad5d-5645db0b01d8",
                            CreatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3649),
                            CreatedBy = "admin",
                            Enable = true,
                            Name = "Super Admin",
                            UpdatedAt = new DateTime(2023, 10, 8, 16, 46, 57, 817, DateTimeKind.Utc).AddTicks(3650),
                            UpdatedBy = "admin"
                        });
                });

            modelBuilder.Entity("BaseSource.Model.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ROLE_ID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoleId");

                    b.ToTable("CUSTOMER_ROLE");
                });

            modelBuilder.Entity("BaseSource.Model.Ward", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("ID");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("CODE");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATED_BY");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("DISTRICT_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NAME");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("SLUG");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TYPE");

                    b.Property<string>("TypeSlug")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TYPE_SLUG");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("WARDS");
                });

            modelBuilder.Entity("BaseSource.Model.AccessToken", b =>
                {
                    b.HasOne("BaseSource.Model.Customer", "Customer")
                        .WithOne("AccessToken")
                        .HasForeignKey("BaseSource.Model.AccessToken", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BaseSource.Model.Address", b =>
                {
                    b.HasOne("BaseSource.Model.Ward", "Ward")
                        .WithMany("Address")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("BaseSource.Model.Category", b =>
                {
                    b.HasOne("BaseSource.Model.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BaseSource.Model.CustomerHistory", b =>
                {
                    b.HasOne("BaseSource.Model.Customer", "Customer")
                        .WithMany("CustomerHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BaseSource.Model.District", b =>
                {
                    b.HasOne("BaseSource.Model.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("BaseSource.Model.EmailVerify", b =>
                {
                    b.HasOne("BaseSource.Model.Customer", "Customer")
                        .WithOne("EmailVerify")
                        .HasForeignKey("BaseSource.Model.EmailVerify", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BaseSource.Model.Log.AuthHistory", b =>
                {
                    b.HasOne("BaseSource.Model.Customer", "Customer")
                        .WithMany("AuthHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BaseSource.Model.Notification", b =>
                {
                    b.HasOne("BaseSource.Model.Customer", "Customer")
                        .WithOne("Notification")
                        .HasForeignKey("BaseSource.Model.Notification", "CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.Order", "Order")
                        .WithOne("Notification")
                        .HasForeignKey("BaseSource.Model.Notification", "OrderID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BaseSource.Model.Order", b =>
                {
                    b.HasOne("BaseSource.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BaseSource.Model.OrderDetail", b =>
                {
                    b.HasOne("BaseSource.Model.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BaseSource.Model.Product", b =>
                {
                    b.HasOne("BaseSource.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BaseSource.Model.UserRole", b =>
                {
                    b.HasOne("BaseSource.Model.Customer", "Customer")
                        .WithMany("UserRoles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseSource.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BaseSource.Model.Ward", b =>
                {
                    b.HasOne("BaseSource.Model.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("BaseSource.Model.Category", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("BaseSource.Model.Customer", b =>
                {
                    b.Navigation("AccessToken");

                    b.Navigation("AuthHistories");

                    b.Navigation("CustomerHistories");

                    b.Navigation("EmailVerify");

                    b.Navigation("Notification");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BaseSource.Model.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("BaseSource.Model.Order", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("BaseSource.Model.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BaseSource.Model.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("BaseSource.Model.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BaseSource.Model.Ward", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
