version: '3.4'

services:
  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: src/APIGateway/Dockerfile
    depends_on:
      - sqlserverservice 
    ports:
      - 15000:80
      - 5000:443
    networks:
      - elastic_es-net

  addressservice:
    image: ${DOCKER_REGISTRY-}addressservice
    
    build:
      context: .
      dockerfile: src/services/AddressService/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15001:80
      - 5001:443
    networks:
      - elastic_es-net

  audioservice:
    image: ${DOCKER_REGISTRY-}audioservice
    
    build:
      context: .
      dockerfile: src/services/AudioService/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15002:80
      - 5002:443
    networks:
      - elastic_es-net

  imageservice:
    image: ${DOCKER_REGISTRY-}imageservice
    
    build:
      context: .
      dockerfile: src/services/ImageService/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15004:80
      - 5004:443
    networks:
      - elastic_es-net

  mailservice:
    image: ${DOCKER_REGISTRY-}mailservice
    
    build:
      context: .
      dockerfile: src/services/MailService/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15005:80
      - 5005:443
    networks:
      - elastic_es-net

  notificationservice:
    image: ${DOCKER_REGISTRY-}notificationservice
    
    build:
      context: .
      dockerfile: src/services/NotificationService/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15006:80
      - 5006:443
    networks:
      - elastic_es-net

  oauth2service:
    image: ${DOCKER_REGISTRY-}oauth2service

    build:
      context: .
      dockerfile: src/services/OAuth2Service/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15007:80
      - 5007:443
    networks:
      - elastic_es-net

  orderservice:
    image: ${DOCKER_REGISTRY-}orderservice
    
    build:
      context: .
      dockerfile: src/services/OrderService/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15008:80
      - 5008:443
    networks:
      - elastic_es-net

  productservice:
    image: ${DOCKER_REGISTRY-}productservice
    
    build:
      context: .
      dockerfile: src/services/ProductService/Dockerfile
    depends_on:
      - sqlserverservice
    ports:
      - 15009:80
      - 5009:443
    networks:
      - elastic_es-net

  sqlserverservice:
    container_name: sqlserver
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
        - 5555:1433
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Strong(!)Password 
      - MSSQL_USER=SA
      - MSSQL_PID=Developer
    networks:
      - elastic_es-net
    volumes:
      - sql_data:/var/opt/mssql

volumes:
  sql_data:

networks:
  elastic_es-net:
     external: true


